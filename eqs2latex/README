# Code Documentation

## Overview

This C++ code provides functions for converting mathematical expressions into LaTeX format. It includes functionality to handle derivatives, subscripts, and sorting of terms based on their derivative order. The main function `convert` processes an input expression and outputs a formatted LaTeX string.

## Functions

### `unsigned find1NumberPos(const std::string &str)`

**Description**: 
Finds the position of the first non-digit character in a string when scanning backwards. This is useful for identifying subscripts in expressions.

**Parameters**:
- `const std::string &str`: The input string from which to find the position.

**Returns**:
- The index of the first non-digit character from the end of the string, or `0` if all characters are digits.

---

### `std::string convertToLatex(const std::string &input)`

**Description**: 
Converts a given string representing a mathematical term into its LaTeX representation. It handles derivatives and special formatting for subscripts and superscripts.

**Parameters**:
- `const std::string &input`: The input string to be converted.

**Returns**:
- A LaTeX formatted string.

---

### `std::vector<std::string> splitTerms(const std::string &expression)`

**Description**: 
Splits a mathematical expression into individual terms using regex to match operators and operands.

**Parameters**:
- `const std::string &expression`: The input expression to split.

**Returns**:
- A vector of strings, each representing a term from the expression.

---

### `std::string processExpression(const std::string &expression)`

**Description**: 
Processes a mathematical expression by splitting it into terms, converting each term to LaTeX format, and reconstructing the expression.

**Parameters**:
- `const std::string &expression`: The input expression to be processed.

**Returns**:
- A string representing the processed LaTeX output.

---

### `std::vector<std::string> extractTerms(const std::string &input)`

**Description**: 
Extracts terms from an input expression using regex to identify terms separated by `+`, `-`, and other operators.

**Parameters**:
- `const std::string &input`: The input expression from which to extract terms.

**Returns**:
- A vector of strings containing the extracted terms.

---

### `int extractSubscript(const std::string &term)`

**Description**: 
Extracts the numeric subscript from a term, if present. 

**Parameters**:
- `const std::string &term`: The term from which to extract the subscript.

**Returns**:
- The subscript as an integer, or `-1` if no subscript is found.

---

### `std::vector<std::string> sortTerms(const std::vector<std::string> &terms)`

**Description**: 
Sorts a vector of terms based on their derivative order and numeric subscripts.

**Parameters**:
- `const std::vector<std::string> &terms`: The terms to sort.

**Returns**:
- A sorted vector of terms.

---

### `std::string reconstructOutput(const std::vector<std::string> &sortedTerms)`

**Description**: 
Reconstructs a string from sorted terms, ensuring to concatenate them properly with appropriate operators.

**Parameters**:
- `const std::vector<std::string> &sortedTerms`: The sorted terms to reconstruct.

**Returns**:
- A string representing the reconstructed output.

---

### `std::string convert(const std::string &input)`

**Description**: 
Main function that processes the input mathematical expression, converting it to LaTeX format, and sorting the terms. It also handles the separation of the left-hand side (LHS) and right-hand side (RHS) of an equation.

**Parameters**:
- `const std::string &input`: The input expression to convert.

**Returns**:
- A string representing the complete LaTeX formatted output.

---

## Usage Example

To use the `convert` function, simply call it with a string representing a mathematical expression:

```cpp
std::string latex = convert("d2x + d1y = 0");
